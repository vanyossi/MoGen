/*
 * linalg.h
 *
 *  Created on: 05/04/2015
 *      Author: Saúl Zapotecas-Martínez
 */

#ifndef MATH_LINALG_H_
#define MATH_LINALG_H_

/** ****************************************************************************
 * The following functions consider that the matrix is generated by
 * contiguous memory blocks.
 ** ***************************************************************************/

/**
 * Enforce symmetry in the matrix C
 * @param C The structure of the square matrix to enforce the symmetry
 * @param n The dimension of the square matrix
 */
void linalg_enforce_symmetry(double **C, unsigned int n);

/**
 * Eigen-decomposition of the matrix C
 * @param C The matrix to be decomposed. It should be positive defined.
 * @param B The normalized eigen-vectors. j-the column is the j-th eigen vector.
 * @param D The eigen-values. j-th value is the eigen-value of the j-th eigen vector.
 * @param n The dimension of C (nxn), B (nxn) and D
 */
void linalg_Eigen_decomposition(double **C, double **B, double *D, unsigned int n);

/**
 * Gaussian Elimination to solve Ax=b
 * Solve the linear system Ax=b (it solves for x)
 * @param A	Square Matrix (nxn)
 * @param x	The vector to be found
 * @param b	The given result
 * @param n	Dimension of x and b
 */
int linalg_Ax_b(double **A, double *x, double *b, unsigned int n);

/**
 * Inverse of a matrix
 * @param A 		The matrix to be inverted.
 * @param A_inv 	The inverse of C.
 * @param n        	The dimension of C (nxn), B (nxn) and D
 */
void linalg_inverse_matrix(double **A, double **A_inv, unsigned int n);

/**
 * Cholesky decomposition of A. A=L*L^t
 * @param A 	The square matrix to be decompose
 * @param L 	The low matrix of the decompose A
 * @param n	    The dimension of the square matrix A
 */
void linalg_Cholesky_decomposition(double **A, double **L, unsigned int n);

/**
 * Compute: a^{t}.cB.a
 * @param a The vector a (n)
 * @param B The square matrix B (nxn)
 * @param c The factor of B
 * @param n The dimension of vector 'a' and the square matrix 'B' (nxn)
 * @return double
 */
double linalg_at_cB_a(double *a, double **B, double c, unsigned int n);

/**
 * Obtain the co-variance matrix 'Sigma', from the 'N' samples 'samples' of dimension 'dimension 'n'
 * @param Sigma    The resulting co-variance matrix
 * @param samples  The samples
 * @param N        The number of samples
 * @param n        The dimension of the samples
 */
void linalg_get_CM(double **Sigma, double **samples, unsigned int N, unsigned int n);

void Test_get_CM(void);

#endif /* MATH_LINALG_H_ */
